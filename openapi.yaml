openapi: 3.0.0
info:
  title: Locations API
  description: Get information about OSU locations and services
  version: v2
  license:
    name: GNU Affero General Public License Version 3
    url: http://www.gnu.org/licenses/agpl-3.0.en.html
  contact:
    name: IS Data Architecture Team
    url: https://is.oregonstate.edu/data-architecture
    email: isdataarchitecture@oregonstate.edu
externalDocs:
  description: GitHub Repository
  url: https://github.com/osu-mist/locations-frontend-api
servers:
  - url: https://api.oregonstate.edu/v2
security:
  - OAuth2:
      - full
paths:
  /locations:
    get:
      tags:
       - locations
      summary: Get locations
      description: Gets all `Location` objects. Can be filtered by parameters.
      operationId: getLocations
      parameters:
        - in: query
          name: filter[search]
          description: 'Search through buildings based on building name and abbreviation'
          required: false
          schema:
            type: string
        - in: query
          name: filter[coordinates]
          description: A (latitude,longitude) pair of coordinates
          required: false
          schema:
            type: string
            pattern: '^-?\d+\.\d+,-?\d+\.\d+$'
            example: 44.567509,-123.286651
        - in: query
          name: filter[distance]
          description: 'The radius of the circle centred on the specified location. Default: 2'
          required: false
          schema:
            type: number
            default: 2.0
            format: float
        - in: query
          name: filter[distanceUnit]
          description: 'Distance can be specified in following units:
            Mile - `mi` or `miles` (default);
            Yard - `yd` or `yards`;
            Feet - `ft` or `feet`;
            Inch - `in` or `inch`;
            Kilometer - `km` or `kilometers`;
            Meter - `m` or `meters`;
            Centimeter - `cm` or `centimeters`;
            Millimeter - `mm` or `millimeters`;
            Nautical mile - `NM`, `nmi` or `nauticalmiles`

            Should be used with the `filter[distance]` parameter
          '
          required: false
          schema:
            type: string
            enum: [mi, miles,
                   yd, yards,
                   ft, feet,
                   in, inch,
                   km, kilometers,
                   m, meters,
                   cm, centimeters,
                   mm, millimeters,
                   nmi, NM, nauticalmiles]
        - $ref: "#/components/parameters/isOpen"
        - in: query
          name: filter[campus][oneOf]
          description: 'Name of the campus.'
          required: false
          schema:
            type: array
            items:
              type: string
              enum:
                - corvallis
                - extension
                - cascades
                - hmsc
                - other
        - in: query
          name: filter[type]
          required: false
          description: 'Type of location. Valid options are: building, dining, cultural-center, parking, and other.'
          schema:
            type: array
            items:
              type: string
              enum:
                - building
                - dining
                - cultural-center
                - parking
                - other
        - in: query
          name: filter[hasGiRestroom]
          description: >
            If true, locations without gender inclusive restrooms will be filtered out.
          required: false
          schema:
            type: boolean
        - in: query
          name: filter[parkingZoneGroup][oneOf]
          description: >
            Locations in results should match the parkingZoneGroup
            in this query parameter.
          required: false
          schema:
            type: array
            items:
              type: string
              enum:
                - A1
                - A2
                - A3
                - B1
                - B2
                - B3
                - C
                - R
        - in: query
          name: filter[adaParkingSpaceCount][gte]
          description: 'Only include locations with ADA parking space greater than or equal to this amount'
          required: false
          schema:
            type: integer
        - in: query
          name: filter[motoParkingSpaceCount][gte]
          description: 'Only include locations with motorcycle parking space greater than or equal to this amount'
          required: false
          schema:
            type: integer
        - in: query
          name: filter[evParkingSpaceCount][gte]
          description: 'Only include locations with electric vehicle parking space greater than or equal to this amount'
          required: false
          schema:
            type: integer
        - in: query
          name: filter[abbreviation]
          description: 'Search by building abbreviation'
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/pageNumber'
        - $ref: '#/components/parameters/pageSize'
        - in: query
          name: include
          required: false
          schema:
            type: array
            items:
              type: string
              enum: [services]
      responses:
        '200':
          description: Successful response
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/LocationSetResult'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
  /locations/{locationId}:
    get:
      tags:
        - locations
      description: 'Finds location by ID'
      operationId: getLocationByID
      parameters:
        - name: locationId
          in: path
          description: 'ID of location to be searched by'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/LocationResult'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /locations/{locationId}/services:
    get:
      tags:
        - locations
        - services
      description: 'Lists services related to a location'
      operationId: getServices
      parameters:
        - name: locationId
          in: path
          description: 'ID of location'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ServicesResultObjects'
        '404':
          $ref: "#/components/responses/404"
        '500':
          $ref: "#/components/responses/500"
  /services:
    get:
      tags:
       - services
      summary: Get services
      description: 'Gets all `Service` objects. Can be filtered by parameters.'
      operationId: getServicesList
      parameters:
        - in: query
          name: filter[query]
          description: 'Query to search through buildings. Looks through the building name, abbreviation.'
          required: false
          schema:
            type: string
        - $ref: "#/components/parameters/isOpen"
        - $ref: '#/components/parameters/pageNumber'
        - $ref: '#/components/parameters/pageSize'
      responses:
        '200':
          description: Successful response
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ServicesResultObjects'
        '400':
          $ref: "#/components/responses/400"
        '500':
          $ref: "#/components/responses/500"
  /services/{serviceId}:
    get:
      tags:
        - services
      description: 'Finds service by ID'
      operationId: getServiceById
      parameters:
        - name: serviceId
          in: path
          description: 'ID of location to be searched by'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ServicesResultObject'
        '404':
          $ref: "#/components/responses/404"
        '500':
          $ref: "#/components/responses/500"
components:
  parameters:
    pageSize:
      in: query
      name: page[size]
      description: 'Number of results to return per page. Used in pagination. Default value is 10.'
      required: false
      schema:
        type: string
        maximum: 500
        default: 25
        minimum: 1
    pageNumber:
      in: query
      name: page[number]
      description: 'Page number of results. Used to paginate through results.'
      required: false
      schema:
        type: string
        default: 1
        minimum: 1
    isOpen:
      in: query
      name: filter[isOpen]
      description: Set true to search only for results that are open right now
      required: false
      schema:
        type: boolean
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: https://api.oregonstate.edu/oauth2/token
          scopes:
            full: Full access to the API
  responses:
    '400':
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResult'
    '404':
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResult'
    '409':
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResult'
    '500':
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResult'
  schemas:
    LocationResult:
      properties:
        links:
          $ref: '#/components/schemas/Links'
        data:
          $ref: '#/components/schemas/LocationsResourceObject'
        included:
          type: array
          items:
            $ref: '#/components/schemas/ServicesResourceObject'
    LocationSetResult:
      properties:
        links:
          $ref: '#/components/schemas/Links'
        data:
          type: array
          items:
            $ref: '#/components/schemas/LocationsResourceObject'
        included:
          type: array
          items:
            $ref: '#/components/schemas/ServicesIncluded'
    ServicesResultObject:
      properties:
        links:
          $ref: '#/components/schemas/Links'
        data:
          $ref: '#/components/schemas/ServicesResourceObject'
    ServicesIncluded:
      properties:
        id:
          type: string
        type:
          type: string
        attributes:
          $ref: '#/components/schemas/ServicesAttributes'
        links:
          $ref: '#/components/schemas/ServiceLinks'
    LocationsResourceObject:
      properties:
        id:
          type: string
        type:
          type: string
        attributes:
          $ref: '#/components/schemas/Attributes'
        links:
          $ref: '#/components/schemas/SelfLink'
        relationships:
          $ref: '#/components/schemas/RelationshipsInLocations'
    ServicesResultObjects:
      properties:
        links:
          $ref: '#/components/schemas/Links'
        data:
          type: array
          items:
            $ref: '#/components/schemas/ServicesResourceObject'
    ServicesResourceObject:
      properties:
        id:
          type: string
        type:
          type: string
        attributes:
          $ref: '#/components/schemas/ServicesAttributes'
        links:
          $ref: '#/components/schemas/ServiceLinks'
        relationships:
          $ref: '#/components/schemas/RelationshipsInServices'
    SelfLink:
      properties:
        self:
          type: string
          description: Url to this resource / location.
    Attributes:
      properties:
        name:
          type: string
          description: Name of the location.
        abbreviation:
          type: string
        latitude:
          type: number
          format: float
        longitude:
          type: number
          format: float
        geometry:
          properties:
            type:
              type: string
              enum:
                - Polygon
                - MultiPolygon
            coordinates:
              description: Array of ring arrays for each physical structure of a location
              type: array
              items:
                description: Array of points that make up a ring.
                type: array
                items:
                  type: array
                  items:
                    type: number
                    format: float
        summary:
          type: string
        description:
          type: string
        address:
          type: string
          example: 12345 NE STREET RD
        city:
          type: string
          example: Corvallis
        state:
          type: string
          example: OR
        zip:
          type: string
          example: '97330'
        telephone:
          type: string
          example: 541-111-1111
        fax:
          type: string
          example: 541-111-1111
        thumbnails:
          type: array
          items:
            type: string
            format: url
            example: https://example.oregonstate.edu/image.jpg
        images:
          type: array
          items:
            type: string
            format: url
            example: https://example.oregonstate.edu/image.jpg
        departments:
          type: array
          items:
            type: string
            example: College of Engineering
        website:
          type: string
          format: url
          example: https://example.oregonstate.edu
        sqft:
          type: string
        calendar:
          type: string
        campus:
          type: string
          example: Corvallis
        type:
          type: string
          enum: [building, dining, other, parking, cultural-center]
          example: building
        giRestroomCount:
          description: Number of gender inclusive restrooms available in the location.
          type: integer
        giRestroomLimit:
          description: >
            If true, access to this location's restrooms may be limited.
            A residence hall might restrict bathroom use or building access to
            residents only.
          type: boolean
        giRestroomLocations:
          description: >
            Room numbers of gender inclusive restrooms within location.
            Some restrooms may not be ADA compliant.
          type: string
          example: 0111A, 0101, 0102
        synonyms:
          type: array
          items:
            type: string
            example: "Gymnasium"
        openHours:
          $ref: '#/components/schemas/DayHours'
        distance:
          description: 'Distance from given location in given distance unit.
                This is only returned when the query parameters lat and lon are specified.
                The default distance unit is mile '
          type: number
          format: float
          example: 1.8
        tags:
          description: 'Tags associated with this location'
          type: array
          items:
            type: string
            example: cultural-center
        parkingZoneGroup:
          description: 'Zonegroup of location if location is parking'
          type: string
          example: A1
        evParkingSpaceCount:
          description: 'Count of electric vehicle parking spaces if the location is parking'
          type: integer
        adaParkingSpaceCount:
          description: 'Count of ADA parking spaces if the location is parking'
          type: integer
        motorcycleParkingSpaceCount:
          description: 'Count of motorcycle parking spaces if the location is parking.'
          type: integer
        weeklyMenu:
          description: 'Link to a weekly menu if the location is dining.'
          type: string
          format: url
          example: https://app.uhds.oregonstate.edu/api/dining/weeklymenu/index?loc=1
    ServicesAttributes:
      properties:
        name:
          type: string
          description: Name of the Service.
        tags:
          description: 'Tags associated with this location'
          type: array
          items:
            type: string
            example: recreation
        openHours:
          type: array
          items:
            $ref: '#/components/schemas/DayHours'
    RelationshipsInLocations:
      properties:
        services:
            $ref: '#/components/schemas/ServicesRelationship'
    RelationshipsInServices:
      properties:
        locations:
            $ref: '#/components/schemas/ServicesRelationship'
    ServicesRelationship:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ResourceObjectIdentifier'
    ResourceObjectIdentifier:
      properties:
        id:
          type: string
        type:
          type: string
    DayHours:
      description: >
        This object represents open hours for a location, relative to the date
        that the API returns the response. 1 represents the current day,
        2 represents the next day, etc. All times are in UTC.
      properties:
        1:
          type: array
          items:
            $ref: '#/components/schemas/TimeSlot'
        2:
          type: array
          items:
            $ref: '#/components/schemas/TimeSlot'
        3:
          type: array
          items:
            $ref: '#/components/schemas/TimeSlot'
        4:
          type: array
          items:
            $ref: '#/components/schemas/TimeSlot'
        5:
          type: array
          items:
            $ref: '#/components/schemas/TimeSlot'
        6:
          type: array
          items:
            $ref: '#/components/schemas/TimeSlot'
        7:
          type: array
          items:
            $ref: '#/components/schemas/TimeSlot'
    TimeSlot:
      properties:
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
    Links:
      properties:
        self:
          type: string
        first:
          type: string
        last:
          type: string
        prev:
          type: string
        next:
          type: string
    ServiceLinks:
      properties:
        self:
          type: string
    ErrorResult:
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorObject'
    ErrorObject:
      properties:
        status:
          type: string
          description: HTTP status code
          example: '123'
        title:
          type: string
          description: A short, user readable summary of the error
          example: Not Found
        code:
          type: string
          description: An application-specific error code
          example: '1234'
        detail:
          type: string
          description: A long description of the error that may contain instance-specific
            details
        links:
          properties:
            about:
              type: string
              format: uri
              description: A link to further information about the error
              example: https://developer.oregonstate.edu/documentation/error-reference#1234