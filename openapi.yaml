openapi: '3.0.2'
info:
  version: "2.0.0"
  title: Locations API
  description: Get information about OSU locations.
servers: 
  - url: https://api.oregonstate.edu/v2
security:
  - OAuth2:
    - full
paths:
  /locations:
    get:
      tags:
       - locations
      summary: Get locations
      description: "Gets all `Location` objects. Can be filtered by parameters."
      operationId: getLocations
      parameters:
        - in: query
          name: filter[query]
          description: "Query to search through buildings based on building name and abbreviation"
          required: false
          schema:
            type: string
        - in: query
          name: filter[latitude]
          description: "Latitude of the location. Should be used with lon parameter"
          required: false
          schema:
            type: number
            format: float
        - in: query
          name: filter[longitude]
          description: "Longitude of the location. Should be used with lat parameter"
          required: false
          schema:
            type: number
            format: float
        - in: query
          name: filter[distance]
          description: "The radius of the circle centred on the specified location. Default: 2"
          required: false
          schema:
            type: number
            format: float
        - in: query
          name: filter[distanceUnit]
          description: "Distance can be specified in following units:
            Mile - mi or miles (default);
            Yard - yd or yards;
            Feet - ft or feet;
            Inch - in or inch;
            Kilometer - km or kilometers;
            Meter - m or meters;
            Centimeter - cm or centimeters;
            Millimeter - mm or millimeters;
            Nautical mile - NM, nmi or nauticalmiles
          "
          required: false
          schema:
            type: string
            enum: 
              - mi
              - miles
              - yd
              - yards
              - ft
              - feet
              - in
              - inch
              - km
              - kilometers
              - m
              - meters
              - cm
              - centimeters
              - mm
              - millimeters
              - nmi
              - NM
              - nauticalmiles
        - in: query
          name: filter[isOpen]
          description: "Set to true to only search for open restaurants/buildings. Default: false to search for all the results"
          required: false
          schema:
            type: boolean
        - in: query
          name: filter[campus][oneOf]
          description: "Name of the campus. Valid options are: corvallis, extension, cascades, hmsc, and other."
          required: false
          schema:
            type: array
            items:
              type: string
              enum:
                - corvallis
                - extension
                - cascades
                - hmsc
                - other
        - in: query
          name: filter[type]
          description: "Type of location. Valid options are: building, dining, cultural-center, parking, and other."
          schema:
            type: array
            items:
              type: string
              enum:
                - building
                - dining
                - cultural-center
                - parking
                - other
        - in: query
          name: filter[giRestroom]
          description: >
            If true, locations without gender inclusive restrooms will be filtered out.
          required: false
          schema:
            type: boolean
        - in: query
          name: filter[parkingZoneGroup][oneOf]
          description: >
            Locations in results should match the parkingZoneGroup
            in this query parameter.
          required: false
          schema:
            type: array
            items:
              type: string
              # what are the possible values for this?
        - in: query
          name: filter[adaParkingSpaceCount][gte]
          description: "Only include locations with ADA parking space greater than or equal to this amount"
          required: false
          schema:
            type: integer
        - in: query
          name: filter[motorcycleParkingSpaceCount][gte]
          description: "Only include locations with motorcycle parking space greater than or equal to this amount"
          required: false
          schema:
            type: integer
        - in: query
          name: filter[evParkingSpaceCount][gte]
          description: "Only include locations with electric vehicle parking space greater than or equal to this amount"
          required: false
          schema:
            type: integer
        - in: query
          name: filter[abbreviation]
          description: "Search by building abbreviation"
          required: false
          schema:
            type: string
        - in: query
          name: page[size]
          description: "Number of results to return. Used in pagination."
          required: false
          schema:
            type: integer
            maximum: 10000
            default: 10
        - in: query
          name: page[number]
          description: "Page number of results. Used to paginate through results."
          required: false
          schema:
            type: integer
        - $ref: '#/components/parameters/pretty'
        - in: query
          name: include
          required: false
          schema:
            type: array
            default: []
            items:
              type: string
              enum: [services]
      responses:
        "200":
          description: "Successful response"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/LocationsResultObjects"
        "404":
          description: "Not Found"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: "Internal Server Error"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Errors"
  /locations/{locationID}:
    get:
      tags:
        - locations
      description: "Finds location by ID"
      operationId: getLocationByID
      parameters:
        - name: locationID
          in: path
          description: "ID of location to be searched by"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Successful response"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/LocationsResultObject"
        "500":
          description: "Internal Server Error"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Errors"
  /locations/{locationID}/services:
    get:
      tags:
        - locations
        - services
      description: "Lists services related to a location"
      operationId: getServices
      parameters:
        - name: locationID
          in: path
          description: "ID of location"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Successful response"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ServicesResultObjects"
        "404":
          description: "Resource not found"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Errors"
        "500":
          description: "Internal Server Error"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Errors"
  /services:
    get:
      tags:
       - services
      summary: Get services
      description: "Gets all `Service` objects. Can be filtered by parameters."
      operationId: getServicesList
      parameters:
        - in: query
          name: filter[query]
          description: "Query to search through buildings. Looks through the building name, abbreviation."
          required: false
          schema:
            type: string
        - in: query
          name: filter[isOpen]
          description: "True if only search for open restaurants/buildings. Default: false to search for all the results"
          required: false
          schema:
            type: boolean
        - in: query
          name: page[size]
          description: "Number of results to return. Used in pagination. Default value is 10."
          required: false
          schema:
            type: string
        - in: query
          name: page[number]
          description: "Page number of results. Used to paginate through results."
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/pretty'
      responses:
        "200":
          description: "Successful response"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ServicesResultObjects"
        "500":
          description: "Internal Server Error"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Errors"
  /services/{serviceID}:
    get:
      tags:
        - services
      description: "Finds service by ID"
      operationId: getServiceById
      parameters:
        - name: serviceID
          in: path
          description: "ID of location to be searched by"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Successful response"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ServicesResultObject"
        "404":
          description: "Resource not found"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Errors"
        "500":
          description: "Internal Server Error"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Errors"
components:
  parameters:
    pretty:
      name: pretty
      in: query
      required: false
      description: If true, JSON response will be pretty-printed
      schema:
        type: boolean
  securitySchemes:
    OAuth2:
      type: oauth2
      flows: 
        clientCredentials:
          tokenUrl: https://api.oregonstate.edu/oauth2/token
          refreshUrl: https://api.oregonstate.edu/oauth2/token
          scopes: 
            full: full access to the API
  schemas:
    LocationsResultObject:
      properties:
        links:
          $ref: "#/components/schemas/Links"
        data:
          $ref: "#/components/schemas/LocationsResourceObject"
        included:
          type: array
          items:
            $ref: "#/components/schemas/ServicesResourceObject"
    LocationsResultObjects:
      properties:
        links:
          $ref: "#/components/schemas/Links"
        data:
          type: array
          items:
            $ref: "#/components/schemas/LocationsResourceObject"
        included:
          type: array
          items:
            $ref: "#/components/schemas/ServicesIncluded"
    ServicesResultObject:
      properties:
        links:
          $ref: "#/components/schemas/Links"
        data:
          $ref: "#/components/schemas/ServicesResourceObject"
    ServicesIncluded:
      properties:
        id:
          type: string
        type:
          type: string
        attributes:
          $ref: "#/components/schemas/ServicesAttributes"
        links:
          $ref: "#/components/schemas/ServiceLinks"
    LocationsResourceObject:
      properties:
        id:
          type: string
        type:
          type: string
        attributes:
          $ref: "#/components/schemas/Attributes"
        links:
          $ref: "#/components/schemas/SelfLink"
        relationships:
          $ref: "#/components/schemas/RelationshipsInLocations"
    ServicesResultObjects:
      properties:
        links:
          $ref: "#/components/schemas/Links"
        data:
          type: array
          items:
            $ref: "#/components/schemas/ServicesResourceObject"
    ServicesResourceObject:
      properties:
        id:
          type: string
        type:
          type: string
        attributes:
          $ref: "#/components/schemas/ServicesAttributes"
        links:
          $ref: "#/components/schemas/ServiceLinks"
        relationships:
          $ref: "#/components/schemas/RelationshipsInServices"
    SelfLink:
      properties:
        self:
          type: string
          description: Url to this resource / location.
    Attributes:
      properties:
        name:
          type: string
          description: Name of the location.
        abbreviation:
          type: string
        latitude:
          type: number
          format: float
        longitude:
          type: number
          format: float
        geometry:
          properties:
            type:
              type: string
              enum:
                - Polygon
                - MultiPolygon
            coordinates:
              description: Array of ring arrays for each physical structure of a location
              type: array
              items:
                description: Array of points that make up a ring.
                type: array
                items:
                  type: array
                  items:
                    type: number
                    format: float
        summary:
          type: string
        description:
          type: string
        address:
          type: string
        city:
          type: string
        state:
          type: string
        zip:
          type: string
        telephone:
          type: string
        fax:
          type: string
        thumbnails:
          type: array
          items:
            type: string
        images:
          type: array
          items:
            type: string
        departments:
          type: array
          items:
            type: string
        website:
          type: string
        sqft:
          type: string
        calendar:
          type: string
        campus:
          type: string
        type:
          type: string
        giRestroomCount:
          description: Number of gender inclusive restrooms available in the location.
          type: integer
        giRestroomLimit:
          description: >
            If true, access to this location's restrooms may be limited.
            A residence hall might restrict bathroom use or building access to
            residents only.
          type: boolean
        giRestroomLocations:
          description: >
            Room numbers of gender inclusive restrooms within location.
            Some restrooms may not be ADA compliant.
          type: string
        synonyms:
          type: array
          items:
            type: string
        openHours:
          $ref: "#/components/schemas/DayHours"
        distance:
          description: "Distance from given location in given distance unit.
                This is only returned when the query parameters lat and lon are specified.
                The default distance unit is mile "
          type: number
          format: float
        tags:
          description: "Tags associated with this location"
          type: array
          items:
            type: string
        parkingZoneGroup:
          description: "Zonegroup of location if location is parking"
          type: string
        evParkingSpaceCount:
          description: "Count of electric vehicle parking spaces if the location is parking"
          type: integer
        adaParkingSpaceCount:
          description: "Count of ADA parking spaces if the location is parking"
          type: integer
        motorcycleParkingSpaceCount:
          description: "Count of motorcycle parking spaces if the location is parking."
          type: integer
        weeklyMenu:
          description: "Link to a weekly menu if the location is dining."
          type: string
    ServicesAttributes:
      properties:
        name:
          type: string
          description: Name of the Service.
        tags:
          description: "Tags associated with this location"
          type: array
          items:
            type: string
        openHours:
          type: array
          items:
            $ref: "#/components/schemas/DayHours"
    RelationshipsInLocations:
      properties:
        services:
            $ref: "#/components/schemas/ServicesRelationship"
    RelationshipsInServices:
      properties:
        locations:
            $ref: "#/components/schemas/ServicesRelationship"
    ServicesRelationship:
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/ResourceObjectIdentifier"
    ResourceObjectIdentifier:
      properties:
        id:
          type: string
        type:
          type: string
    DayHours:
      description: >
        This object represents open hours for a location, relative to the date
        that the API returns the response. 1 represents the current day,
        2 represents the next day, etc. All times are in UTC.
      properties:
        1:
          type: array
          items:
            $ref: "#/components/schemas/TimeSlot"
        2:
          type: array
          items:
            $ref: "#/components/schemas/TimeSlot"
        3:
          type: array
          items:
            $ref: "#/components/schemas/TimeSlot"
        4:
          type: array
          items:
            $ref: "#/components/schemas/TimeSlot"
        5:
          type: array
          items:
            $ref: "#/components/schemas/TimeSlot"
        6:
          type: array
          items:
            $ref: "#/components/schemas/TimeSlot"
        7:
          type: array
          items:
            $ref: "#/components/schemas/TimeSlot"
    TimeSlot:
      properties:
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
    Links:
      properties:
        self:
          type: string
        first:
          type: string
        last:
          type: string
        prev:
          type: string
        next:
          type: string
    ServiceLinks:
      properties:
        self:
          type: string
    Error:
      type: object
      properties:
        status:
          type: integer
          format: int32
          description: HTTP status code.
        developerMessage:
          type: string
          description: An error string aimed at developers.
        userMesage:
          type: string
          description: An error string aimed at end users.
        code:
          type: integer
          description: Error code.
        details:
          type: string
          description: A link to further information about the error.
    Errors:
      title: ArrayOfErrors
      type: array
      items:
        $ref: "#/components/schemas/Error"
