openapi: 3.0.0
info:
  title: Locations API
  description: Get information about OSU locations and services
  version: v2
  license:
    name: GNU Affero General Public License Version 3
    url: http://www.gnu.org/licenses/agpl-3.0.en.html
  contact:
    name: IS Data Architecture Team
    url: https://is.oregonstate.edu/data-architecture
    email: isdataarchitecture@oregonstate.edu
externalDocs:
  description: GitHub Repository
  url: https://github.com/osu-mist/locations-api
servers:
  - url: https://api.oregonstate.edu/v2
security:
  - OAuth2:
      - full
paths:
  /locations:
    get:
      tags:
        - locations
      summary: Get locations
      description: Gets all `Location` objects. Can be filtered by parameters.
      operationId: getLocations
      parameters:
        - in: query
          name: filter[search]
          description: Search through buildings based on building name and abbreviation
          required: false
          schema:
            type: string
            example: dixon
        - in: query
          name: filter[name]
          description: Search for a building with this exact name
          required: false
          schema:
            type: string
            example: Dixon Recreation Center
        - in: query
          name: filter[name][fuzzy]
          description: Search for a building with a name similiar to the query
          required: false
          schema:
            type: string
            example: dixon
        - in: query
          name: filter[coordinates]
          description: A (latitude,longitude) pair of coordinates
          required: false
          schema:
            type: string
            pattern: '^-?\d+\.\d+,-?\d+\.\d+$'
            example: 44.567509,-123.286651
        - in: query
          name: filter[distance]
          description: 'The radius of the circle centred on the specified location. Default: 2'
          required: false
          schema:
            type: number
            default: 2.0
            format: float
        - in: query
          name: filter[distanceUnit]
          description: |
            Distance can be specified in following units:
            - `mi` - miles
            - `yd` - yards
            - `ft` - feet
            - `in` - inches
            - `km` - kilometers
            - `m` - meters
            - `cm` - centimeters
            - `mm` - millimeters
            - `nmi` - nautical miles

            Should be used with the `filter[distance]` parameter
          required: false
          schema:
            type: string
            enum: [mi, yd, ft, in, km, m, cm, mm, nmi]
            default: mi
        - $ref: '#/components/parameters/isOpen'
        - in: query
          name: filter[campus][oneOf]
          description: Name of the campus.
          required: false
          schema:
            type: array
            items:
              type: string
              enum:
                - corvallis
                - extension
                - cascades
                - hmsc
                - other
        - in: query
          name: filter[type][oneOf]
          required: false
          description: 'Type of location'
          schema:
            type: array
            items:
              type: string
              enum:
                - building
                - dining
                - cultural-center
                - parking
                - other
        - in: query
          name: filter[hasGiRestroom]
          description: If true, locations without gender inclusive restrooms will be filtered out.
          required: false
          schema:
            type: boolean
        - in: query
          name: filter[parkingZoneGroup][oneOf]
          description: Locations in results should match the parkingZoneGroup in this query parameter.
          required: false
          schema:
            type: array
            items:
              type: string
              enum:
                - A1
                - A2
                - A3
                - B1
                - B2
                - B3
                - C
                - R
        - in: query
          name: filter[adaParkingSpaceCount][gte]
          description: Only include locations with ADA parking space greater than or equal to this amount
          required: false
          schema:
            type: number
            format: integer
            example: 1
        - in: query
          name: filter[motoParkingSpaceCount][gte]
          description: Only include locations with motorcycle parking space greater than or equal to this amount
          required: false
          schema:
            type: number
            format: integer
            example: 1
        - in: query
          name: filter[evParkingSpaceCount][gte]
          description: Only include locations with electric vehicle parking space greater than or equal to this amount
          required: false
          schema:
            type: number
            format: integer
            example: 1
        - in: query
          name: filter[bannerAbbreviation]
          description: Search by banner abbreviation
          required: false
          schema:
            type: string
            example: DxRC
        - in: query
          name: filter[arcGisAbbreviation]
          description: Search by ArcGIS abbreviation
          required: false
          schema:
            type: string
            example: DxRC
        - $ref: '#/components/parameters/pageNumber'
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/locationsIncluded'
      responses:
        '200':
          description: Successful response
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/LocationSetResult'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
  /locations/{locationId}:
    get:
      tags:
        - locations
      description: Finds location by ID
      operationId: getLocationById
      parameters:
        - $ref: '#/components/parameters/locationId'
        - $ref: '#/components/parameters/locationsIncluded'
      responses:
        '200':
          description: Successful response
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/LocationResult'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /locations/{locationId}/services:
    get:
      tags:
        - locations
        - services
      description: Lists services related to a location
      operationId: getLocationServices
      parameters:
        - $ref: '#/components/parameters/locationId'
      responses:
        '200':
          description: Successful response
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/LocationServiceSetResult'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /services:
    get:
      tags:
        - services
      summary: Get services
      description: Gets all `Service` objects. Can be filtered by parameters.
      operationId: getServices
      parameters:
        - in: query
          name: filter[search]
          description: Query to search through buildings. Looks through the building name, abbreviation.
          required: false
          schema:
            type: string
            example: dixon
        - $ref: '#/components/parameters/isOpen'
        - $ref: '#/components/parameters/pageNumber'
        - $ref: '#/components/parameters/pageSize'
      responses:
        '200':
          description: Successful response
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ServiceSetResult'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
  /services/{serviceId}:
    get:
      tags:
        - services
      description: Finds service by ID
      operationId: getServiceById
      parameters:
        - name: serviceId
          in: path
          description: ID of service
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ServiceResult'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /services/{serviceId}/locations:
    get:
      tags:
        - services
        - locations
      description: Finds locations related to a service
      operationId: getServiceLocationsById
      parameters:
        - name: serviceId
          in: path
          description: ID of service
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ServiceLocationSetResult'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
components:
  parameters:
    locationsIncluded:
      in: query
      name: include
      required: false
      description: >-
        Add "services" to have the response include all service
        resources for this location
      schema:
        type: array
        items:
          type: string
          enum: [services]
    locationId:
      name: locationId
      in: path
      description: ID of location to be searched by
      required: true
      schema:
        type: string
    pageNumber:
      name: page[number]
      in: query
      required: false
      description: Page number of results
      schema:
        type: integer
        minimum: 1
        default: 1
    pageSize:
      name: page[size]
      in: query
      required: false
      description: Number of results to return
      schema:
        type: integer
        minimum: 1
        maximum: 500
        default: 25
    isOpen:
      in: query
      name: filter[isOpen]
      description: Set true to search only for results that are open right now
      required: false
      schema:
        type: boolean
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: https://api.oregonstate.edu/oauth2/token
          scopes:
            full: Full access to the API
  responses:
    '400':
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResult'
    '404':
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResult'
    '500':
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResult'
  schemas:
    CoordinatePair:
      description: a pair of latitude, longitude coordinates
      type: object
      required: [lat, long]
      properties:
        lat:
          example: 44.562934
          type: number
          format: float
          description: the latitude value of the coordinate pair
        long:
          example: -123.281901
          type: number
          format: float
          description: the longitude value of the coordinate pair
    LocationType:
      type: string
      enum: [location]
    ServiceType:
      type: string
      enum: [service]
    LocationResult:
      properties:
        links:
          $ref: '#/components/schemas/PaginationLinks'
        data:
          $ref: '#/components/schemas/LocationResource'
        included:
          type: array
          items:
            $ref: '#/components/schemas/ServiceResource'
        meta:
          $ref: '#/components/schemas/Meta'
    ServiceLocationSetResult:
      properties:
        links:
          $ref: '#/components/schemas/PaginationLinks'
        data:
          type: array
          items:
            $ref: '#/components/schemas/LocationResource'
    LocationSetResult:
      properties:
        links:
          $ref: '#/components/schemas/PaginationLinks'
        data:
          type: array
          items:
            $ref: '#/components/schemas/LocationResource'
        included:
          type: array
          items:
            $ref: '#/components/schemas/ServiceIncluded'
        meta:
          $ref: '#/components/schemas/Meta'
    ServiceResult:
      properties:
        links:
          $ref: '#/components/schemas/PaginationLinks'
        data:
          $ref: '#/components/schemas/ServiceResource'
        included:
          type: array
          items:
            $ref: '#/components/schemas/LocationIncluded'
        meta:
          $ref: '#/components/schemas/Meta'
    ServiceIncluded:
      properties:
        id:
          type: string
        type:
          $ref: '#/components/schemas/ServiceType'
        attributes:
          $ref: '#/components/schemas/ServicesAttributes'
        links:
          $ref: '#/components/schemas/SelfLink'
    LocationIncluded:
      properties:
        id:
          type: string
          example: 5c4f1efcbaada0c63e
          description: ID of a service object
        type:
          $ref: '#/components/schemas/LocationType'
        attributes:
          $ref: '#/components/schemas/LocationsAttributes'
        links:
          $ref: '#/components/schemas/SelfLink'
    LocationResource:
      properties:
        id:
          type: string
          example: 5c4f1efcbaada0c63e
          description: ID of a location object
        type:
          $ref: '#/components/schemas/LocationType'
        attributes:
          $ref: '#/components/schemas/LocationsAttributes'
        links:
          $ref: '#/components/schemas/SelfLink'
        relationships:
          $ref: '#/components/schemas/RelationshipsInLocations'
    LocationServiceSetResult:
      properties:
        links:
          $ref: '#/components/schemas/PaginationLinks'
        data:
          type: array
          items:
            $ref: '#/components/schemas/ServiceResource'
    ServiceSetResult:
      properties:
        links:
          $ref: '#/components/schemas/PaginationLinks'
        data:
          type: array
          items:
            $ref: '#/components/schemas/ServiceResource'
        meta:
          $ref: '#/components/schemas/Meta'
        included:
          type: array
          items:
            $ref: '#/components/schemas/LocationIncluded'
    ServiceResource:
      properties:
        id:
          type: string
          example: 5c4f1efcbaada0c63e
          description: ID of a service object
        type:
          $ref: '#/components/schemas/ServiceType'
        attributes:
          $ref: '#/components/schemas/ServicesAttributes'
        links:
          $ref: '#/components/schemas/SelfLink'
        relationships:
          $ref: '#/components/schemas/RelationshipsInServices'
    Meta:
      properties:
        totalResults:
          type: integer
          description: Total number of results
          example: 10
        totalPages:
          type: integer
          description: Total number of pages
          example: 10
        currentPageNumber:
          type: integer
          description: Page number of the returned results
          example: 1
        currentPageSize:
          type: integer
          description: Number of results per page
          example: 25
    SelfLink:
      properties:
        self:
          type: string
          format: uri
          description: Self-link of current resource
    LocationsAttributes:
      properties:
        name:
          nullable: false
          type: string
          description: Name of the location.
          example: Dixon Recreation Center
        abbreviations:
          type: object
          description: possible abbreviations for the location
          properties:
            banner:
              type: string
              description: Banner abbreviation for the location
              nullable: true
              example: DxRC
            arcGis:
              type: string
              description: ArcGIS abreviation for the location
              nullable: true
              example: DxRC
        coordinates:
          $ref: '#/components/schemas/CoordinatePair'
        geometry:
          description: >-
            an array of arrays of (latitude, longitude) coordinates 
            representing the shapes that make up the location
          nullable: true
          properties:
            type:
              type: string
              enum:
                - Polygon
                - MultiPolygon
            coordinates:
              description: Array of ring arrays for each physical structure of a location
              type: array
              items:
                description: Array of points that make up a ring.
                type: array
                items:
                  $ref: '#/components/schemas/CoordinatePair'
        zoneSummary:
          nullable: true
          type: string
          description: the description of the parking zone of the group
          example: 'Zone: Austin Hall'
        description:
          type: object
          description: miscellaneous information about the location in HTML and text format
          nullable: true
          properties:
            html:
              type: string
              description: the description for the location, formatted using HTML tags
              example: >-
                <h4>\n\tAccessibility:</h4>
                \n<p>\n\tENTRIES: North entry: ramp up to main floor.<br />
                \n\tFLOORS: All floors; elevator (no Braille).</p>\n
            text:
              type: string
              description: the desciption for the location, formatted without HTML tags
              example: >-
                \r\n\tAccessibility:\r\n\r\n\r\n\t
                ENTRIES: North entry: ramp up to main floor.\r\n\t
                FLOORS: All floors; elevator (no Braille).\r\n
        address:
          type: string
          example: 12345 NE STREET RD
          nullable: true
          description: the street address of the location
        city:
          type: string
          example: Corvallis
          nullable: true
          description: the city where the location is located
        state:
          type: string
          example: OR
          nullable: true
          description: the state where the location is located
        zip:
          type: string
          example: '97330'
          nullable: true
          description: the zip code of the location
        telephone:
          type: string
          example: '541-111-1111'
          nullable: true
          description: a phone number that can be used to reach the location
        fax:
          type: string
          example: '541-111-1111'
          description: a fax number that can be used to reach the location
        images:
          type: object
          description: full size and thumbnail image URLs for the location
          nullable: false
          properties:
            fullSize:
              description: an array of URLs for images of the location
              type: array
              nullable: false
              items:
                type: string
                format: uri
                example: https://example.oregonstate.edu/image.jpg
            thumbnails:
              type: array
              description: an array of URLs for thumbnail images of the location
              nullable: false
              items:
                type: string
                format: uri
                example: https://example.oregonstate.edu/image.jpg
        departments:
          type: array
          description: departments related to the location
          nullable: false
          items:
            type: string
            example: College of Engineering
        website:
          type: string
          description: the website of the location
          nullable: true
          format: uri
          example: https://example.oregonstate.edu
        sqft:
          type: number
          format: integer
          description: the size in square feet of the location
          example: 12345
          nullable: true
        calendar:
          type: string
          description: a link, if available, to a calendar file for the location
          nullable: true
          format: uri
          example: https://example.oregonstate.edu/cal.ics
        campus:
          type: string
          example: corvallis
          description: the OSU campus where the location is located
          nullable: false
          enum:
            - corvallis
            - extension
            - cascades
            - hmsc
            - other
        type:
          type: string
          enum: [building, dining, other, parking, cultural-center]
          nullable: false
          description: the type of the building
        giRestrooms:
          type: object
          nullable: false
          properties:
            count:
              description: Number of gender inclusive restrooms available in the location.
              type: number
              nullable: true
              format: integer
            limit:
              description: >-
                If true, access to this location's restrooms may be limited.
                A residence hall might restrict bathroom use or building access to
                residents only.
              nullable: true
              type: boolean
            locations:
              description: >-
                Room numbers of gender inclusive restrooms within location.
                Some restrooms may not be ADA compliant.
              type: array
              nullable: true
              items:
                type: string
                example: 0111A
        synonyms:
          type: array
          nullable: false
          description: other terms that can be used for the location
          items:
            type: string
            example: Gymnasium
        openHours:
          $ref: '#/components/schemas/DayHours'
        distance:
          description: >-
            Distance from given location in given distance unit.
            This is only returned when the query parameters lat and lon are specified.
            The default distance unit is mile
          type: number
          nullable: true
          format: float
          example: 1.8
        tags:
          description: Tags associated with this location
          nullable: false
          type: array
          items:
            type: string
            enum:
              - building
              - dining
              - cultural-center
              - parking
              - other
        parkingZoneGroup:
          description: Zonegroup of location if location is parking
          type: string
          nullable: true
          enum:
            - A1
            - A2
            - A3
            - B1
            - B2
            - B3
            - C
            - R
        parkingSpaces:
          type: object
          required: [evSpaceCount, adaSpaceCount, motorcycleSpaceCount]
          properties:
            evSpaceCount:
              description: Count of electric vehicle parking spaces if the location is parking
              type: number
              format: integer
              nullable: true
            adaSpaceCount:
              description: Count of ADA parking spaces if the location is parking
              type: number
              format: integer
              nullable: true
            motorcycleSpaceCount:
              description: Count of motorcycle parking spaces if the location is parking.
              type: number
              format: integer
              nullable: true
        weeklyMenu:
          description: Link to a weekly menu if the location is dining.
          type: string
          format: uri
          nullable: true
          example: https://app.uhds.oregonstate.edu/api/dining/weeklymenu/index?loc=1
    ServicesAttributes:
      properties:
        name:
          type: string
          description: Name of the Service.
          nullable: false
          example: Dixon Pool
        tags:
          description: Tags associated with this location
          type: array
          nullable: false
          items:
            type: string
            example: recreation
        openHours:
          $ref: '#/components/schemas/DayHours'
    RelationshipsInLocations:
      properties:
        services:
          properties:
            data:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: string
                    example: 5c4f1efcbaada0c63e
                  type:
                    $ref: '#/components/schemas/ServiceType'
            links:
              $ref: '#/components/schemas/SelfLink'
    RelationshipsInServices:
      properties:
        services:
          properties:
            data:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: string
                    example: 5c4f1efcbaada0c63e
                  type:
                    $ref: '#/components/schemas/LocationType'
            links:
              $ref: '#/components/schemas/SelfLink'
    DayHours:
      description: >-
        This object represents open hours for a location, relative to the date
        that the API returns the response. The object has seven elements: the 
        first element represents the current day, the second represents the next 
        day etc. All times are in UTC.
      type: object
      minProperties: 7
      maxProperties: 7
      additionalProperties:
        items:
          $ref: '#/components/schemas/TimeSlot'
    TimeSlot:
      type: object
      properties:
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
    PaginationLinks:
      properties:
        first:
          type: string
          format: uri
          description: The first page of data
        last:
          type: string
          format: uri
          description: The last page of data
        prev:
          type: string
          format: uri
          nullable: true
          description: The previous page of data
        next:
          type: string
          format: uri
          nullable: true
          description: The next page of data
    ErrorResult:
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorObject'
    ErrorObject:
      properties:
        status:
          type: string
          description: HTTP status code
          example: '123'
        title:
          type: string
          description: A short, user readable summary of the error
          example: Not Found
        code:
          type: string
          description: An application-specific error code
          example: '1234'
        detail:
          type: string
          description: >-
            A long description of the error that may contain instance-specific
            details
        links:
          properties:
            about:
              type: string
              format: uri
              description: A link to further information about the error
              example: https://developer.oregonstate.edu/documentation/error-reference#1234
